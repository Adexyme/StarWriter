{"version":3,"file":"FileHandler.js","sourceRoot":"","sources":["../../src/FileHandler.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,MAAa,WAAW;;AAAxB,kCA0CC;AAxCe,+BAAmB,GAAiC,IAAI,CAAC;AACzD,kCAAsB,GAClC;;QACE,MAAM,OAAO,GAAG;YACd,KAAK,EAAE;gBACL;oBACE,WAAW,EAAE,YAAY;oBACzB,MAAM,EAAE;wBACN,WAAW,EAAE,CAAC,OAAO,CAAC;qBACvB;iBACF;aACF;SACF,CAAC;QAEF,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;QACxD,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,cAAc,EAAE,CAAC;QAC/C,OAAO,QAAQ,CAAC;IAClB,CAAC;CAAA,CAAC;AACU,yBAAa,GAAG;;QAC5B,IAAI,WAAW,CAAC,mBAAmB,KAAK,IAAI,EAAE;YAC5C,mCAAmC;YACnC,MAAM,WAAW,CAAC,mBAAmB,CAAC,KAAK,EAAE,CAAC;YAC9C,sDAAsD;YACtD,WAAW,CAAC,WAAW,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;YACxC,WAAW,CAAC,WAAW,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;SAC/C;IACH,CAAC;CAAA,CAAC;AACY,oBAAQ,GAAG;;QACvB,IAAI,WAAW,CAAC,mBAAmB,KAAK,IAAI,EAAE;YAC5C,WAAW,CAAC,mBAAmB;gBAC7B,MAAM,WAAW,CAAC,sBAAsB,EAAE,CAAC;SAC9C;QAED,MAAM,WAAW,CAAC,mBAAmB,CAAC,KAAK,CACzC,WAAW,CAAC,WAAW,CAAC,WAAW,EAAE,CACtC,CAAC;QACF,gDAAgD;QAEhD,gBAAgB;IAClB,CAAC;CAAA,CAAC","sourcesContent":["import { HtmlHandler } from \"./HtmlHandler\";\r\nexport class FileHandler {\r\n  public static HtmlHandler: HtmlHandler;\r\n  public static fileWriteableStream: FileSystemWritableFileStream = null;\r\n  public static getFileWriteableStream =\r\n    async function (): Promise<FileSystemWritableFileStream> {\r\n      const options = {\r\n        types: [\r\n          {\r\n            description: \"Test files\",\r\n            accept: {\r\n              \"text/html\": [\".html\"],\r\n            },\r\n          },\r\n        ],\r\n      };\r\n\r\n      const handle = await window.showSaveFilePicker(options);\r\n      const writable = await handle.createWritable();\r\n      return writable;\r\n    };\r\n  public static createNewFile = async function () {\r\n    if (FileHandler.fileWriteableStream !== null) {\r\n      //close the stream for the old file\r\n      await FileHandler.fileWriteableStream.close();\r\n      //clear out the markdown input and output for new file\r\n      FileHandler.HtmlHandler.setMarkdown(\"\");\r\n      FileHandler.HtmlHandler.setMarkdownOutput(\"\");\r\n    }\r\n  };\r\n  public static saveFile = async function () {\r\n    if (FileHandler.fileWriteableStream === null) {\r\n      FileHandler.fileWriteableStream =\r\n        await FileHandler.getFileWriteableStream();\r\n    }\r\n\r\n    await FileHandler.fileWriteableStream.write(\r\n      FileHandler.HtmlHandler.getMarkdown()\r\n    );\r\n    //await FileHandler.fileWriteableStream.close();\r\n\r\n    //return handle;\r\n  };\r\n}\r\n"]}