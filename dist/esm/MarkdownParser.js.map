{"version":3,"file":"MarkdownParser.js","sourceRoot":"","sources":["../../src/MarkdownParser.ts"],"names":[],"mappings":";;;AAAA,MAAa,cAAc;;AAA3B,wCAYC;AAXC,iCAAiC;AAE1B,oBAAK,GAAG,CAAC,IAAY,EAAU,EAAE;IACtC,MAAM,MAAM,GAAG,IAAI;SAChB,OAAO,CAAC,eAAe,EAAE,aAAa,CAAC,CAAC,SAAS;SACjD,OAAO,CAAC,cAAc,EAAE,aAAa,CAAC,CAAC,SAAS;SAChD,OAAO,CAAC,aAAa,EAAE,aAAa,CAAC,CAAC,SAAS;SAC/C,OAAO,CAAC,iBAAiB,EAAE,WAAW,CAAC,CAAC,YAAY;SACpD,OAAO,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC,CAAC,cAAc;IACtD,OAAO,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,yCAAyC;AACjE,CAAC,CAAC","sourcesContent":["export class MarkdownParser {\r\n  //private utilityCls: UtilityCls;\r\n\r\n  static parse = (text: string): string => {\r\n    const toHTML = text\r\n      .replace(/^### (.*$)/gim, \"<h3>$1</h3>\") // h3 tag\r\n      .replace(/^## (.*$)/gim, \"<h2>$1</h2>\") // h2 tag\r\n      .replace(/^# (.*$)/gim, \"<h1>$1</h1>\") // h1 tag\r\n      .replace(/\\*\\*(.*)\\*\\*/gim, \"<b>$1</b>\") // bold text\r\n      .replace(/\\*(.*)\\*/gim, \"<i>$1</i>\"); // italic text\r\n    return toHTML.trim(); // using trim method to remove whitespace\r\n  };\r\n}\r\n"]}