{"version":3,"file":"MdParser.js","sourceRoot":"","sources":["../../src/MdParser.ts"],"names":[],"mappings":"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","sourcesContent":["export class MdParser {\r\n  /***   Regex Markdown Parser by chalarangelo   ***/\r\n  // Replaces 'regex' with 'replacement' in 'str'\r\n  // Curry function, usage: replaceRegex(regexVar, replacementVar) (strVar)\r\n  private replaceRegex = function (regex, replacement) {\r\n    return function (str) {\r\n      return str.replace(regex, replacement);\r\n    };\r\n  };\r\n  // Regular expressions for Markdown (a bit strict, but they work)\r\n  private codeBlockRegex = /((\\n\\t)(.*))+/g;\r\n  private inlineCodeRegex = /(`)(.*?)\\1/g;\r\n  private imageRegex = /!\\[([^\\[]+)\\]\\(([^\\)]+)\\)/g;\r\n  private linkRegex = /\\[([^\\[]+)\\]\\(([^\\)]+)\\)/g;\r\n  private headingRegex = /\\n(#+\\s*)(.*)/g;\r\n  private boldItalicsRegex = /(\\*{1,2})(.*?)\\1/g;\r\n  private strikethroughRegex = /(\\~\\~)(.*?)\\1/g;\r\n  private blockquoteRegex = /\\n(&gt;|\\>)(.*)/g;\r\n  private horizontalRuleRegex = /\\n((\\-{3,})|(={3,}))/g;\r\n  private unorderedListRegex = /(\\n\\s*(\\-|\\+)\\s.*)+/g;\r\n  private orderedListRegex = /(\\n\\s*([0-9]+\\.)\\s.*)+/g;\r\n  private paragraphRegex =\r\n    /\\n+(?!<pre>)(?!<h)(?!<ul>)(?!<blockquote)(?!<hr)(?!\\t)([^\\n]+)\\n/g;\r\n  // Replacer functions for Markdown\r\n  private codeBlockReplacer = function (fullMatch) {\r\n    return \"\\n<pre>\" + fullMatch + \"</pre>\";\r\n  };\r\n  private inlineCodeReplacer = function (fullMatch, tagStart, tagContents) {\r\n    return (\r\n      '<div class=\"row \"><div class=\"col  text-bg-dark border  border-3 border-primary rounded-3 p-3 my-auto  mx-1 \"><code  class=\" text-white\">' +\r\n      tagContents +\r\n      \"</code></div></div>\"\r\n    );\r\n  };\r\n  private imageReplacer = function (fullMatch, tagTitle, tagURL) {\r\n    return '<img src=\"' + tagURL + '\" alt=\"' + tagTitle + '\" />';\r\n  };\r\n  private linkReplacer = function (fullMatch, tagTitle, tagURL) {\r\n    return '<a href=\"' + tagURL + '\">' + tagTitle + \"</a>\";\r\n  };\r\n  private headingReplacer = function (fullMatch, tagStart, tagContents) {\r\n    return (\r\n      \"\\n<h\" +\r\n      tagStart.trim().length +\r\n      \">\" +\r\n      tagContents +\r\n      \"</h\" +\r\n      tagStart.trim().length +\r\n      \">\"\r\n    );\r\n  };\r\n  private boldItalicsReplacer = function (fullMatch, tagStart, tagContents) {\r\n    return (\r\n      \"<\" +\r\n      (tagStart.trim().length == 1 ? \"em\" : \"strong\") +\r\n      \">\" +\r\n      tagContents +\r\n      \"</\" +\r\n      (tagStart.trim().length == 1 ? \"em\" : \"strong\") +\r\n      \">\"\r\n    );\r\n  };\r\n  private strikethroughReplacer = function (fullMatch, tagStart, tagContents) {\r\n    return \"<del>\" + tagContents + \"</del>\";\r\n  };\r\n  private blockquoteReplacer = function (fullMatch, tagStart, tagContents) {\r\n    return \"\\n<blockquote>\" + tagContents + \"</blockquote>\";\r\n  };\r\n  private horizontalRuleReplacer = function (fullMatch) {\r\n    return \"\\n<hr />\";\r\n  };\r\n  private unorderedListReplacer = function (fullMatch) {\r\n    let items = \"\";\r\n    fullMatch\r\n      .trim()\r\n      .split(\"\\n\")\r\n      .forEach((item) => {\r\n        items += \"<li>\" + item.substring(2) + \"</li>\";\r\n      });\r\n    return \"\\n<ul>\" + items + \"</ul>\";\r\n  };\r\n  private orderedListReplacer = function (fullMatch) {\r\n    let items = \"\";\r\n    fullMatch\r\n      .trim()\r\n      .split(\"\\n\")\r\n      .forEach((item) => {\r\n        items += \"<li>\" + item.substring(item.indexOf(\".\") + 2) + \"</li>\";\r\n      });\r\n    return \"\\n<ol>\" + items + \"</ol>\";\r\n  };\r\n  private paragraphReplacer = function (fullMatch, tagContents) {\r\n    return \"<p>\" + tagContents + \"</p>\";\r\n  };\r\n  // Rules for Markdown parsing (use in order of appearance for best results)\r\n  private replaceCodeBlocks = this.replaceRegex(\r\n    this.codeBlockRegex,\r\n    this.codeBlockReplacer\r\n  );\r\n  private replaceInlineCodes = this.replaceRegex(\r\n    this.inlineCodeRegex,\r\n    this.inlineCodeReplacer\r\n  );\r\n  private replaceImages = this.replaceRegex(\r\n    this.imageRegex,\r\n    this.imageReplacer\r\n  );\r\n  private replaceLinks = this.replaceRegex(this.linkRegex, this.linkReplacer);\r\n  private replaceHeadings = this.replaceRegex(\r\n    this.headingRegex,\r\n    this.headingReplacer\r\n  );\r\n  private replaceBoldItalics = this.replaceRegex(\r\n    this.boldItalicsRegex,\r\n    this.boldItalicsReplacer\r\n  );\r\n  private replaceceStrikethrough = this.replaceRegex(\r\n    this.strikethroughRegex,\r\n    this.strikethroughReplacer\r\n  );\r\n  private replaceBlockquotes = this.replaceRegex(\r\n    this.blockquoteRegex,\r\n    this.blockquoteReplacer\r\n  );\r\n  private replaceHorizontalRules = this.replaceRegex(\r\n    this.horizontalRuleRegex,\r\n    this.horizontalRuleReplacer\r\n  );\r\n  private replaceUnorderedLists = this.replaceRegex(\r\n    this.unorderedListRegex,\r\n    this.unorderedListReplacer\r\n  );\r\n  private replaceOrderedLists = this.replaceRegex(\r\n    this.orderedListRegex,\r\n    this.orderedListReplacer\r\n  );\r\n  private replaceParagraphs = this.replaceRegex(\r\n    this.paragraphRegex,\r\n    this.paragraphReplacer\r\n  );\r\n  // Fix for tab-indexed code blocks\r\n  private codeBlockFixRegex = /\\n(<pre>)((\\n|.)*)(<\\/pre>)/g;\r\n  private codeBlockFixer = function (\r\n    fullMatch,\r\n    tagStart,\r\n    tagContents,\r\n    lastMatch,\r\n    tagEnd\r\n  ) {\r\n    let lines = \"\";\r\n    tagContents.split(\"\\n\").forEach((line) => {\r\n      lines += line.substring(1) + \"\\n\";\r\n    });\r\n    return tagStart + lines + tagEnd;\r\n  };\r\n  private fixCodeBlocks = this.replaceRegex(\r\n    this.codeBlockFixRegex,\r\n    this.codeBlockFixer\r\n  );\r\n  // Replacement rule order function for Markdown\r\n  // Do not use as-is, prefer parseMarkdown as seen below\r\n  private replaceMarkdown = function (str) {\r\n    return this.replaceParagraphs(\r\n      this.replaceOrderedLists(\r\n        this.replaceUnorderedLists(\r\n          this.replaceHorizontalRules(\r\n            this.replaceBlockquotes(\r\n              this.replaceceStrikethrough(\r\n                this.replaceBoldItalics(\r\n                  this.replaceHeadings(\r\n                    this.replaceLinks(\r\n                      this.replaceImages(\r\n                        this.replaceInlineCodes(this.replaceCodeBlocks(str))\r\n                      )\r\n                    )\r\n                  )\r\n                )\r\n              )\r\n            )\r\n          )\r\n        )\r\n      )\r\n    );\r\n  };\r\n  // Parser for Markdown (fixes code, adds empty lines around for parsing)\r\n  // Usage: parseMarkdown(strVar)\r\n  public parse = function (str) {\r\n    return this.fixCodeBlocks(this.replaceMarkdown(\"\\n\" + str + \"\\n\")).trim();\r\n  };\r\n}\r\n"]}